Authorization 

Def: Once a user has acess, what can they do


Mechanisms:

  node: NodeAuthorizer - kubelet uses this


  Attribute Based Auth (ABAC): - Assosiate a user or group with a set of permissions 
                               - Create policy file that specifies this
 					    - Difficult to manage 



  Role Based Auth (RBAC): Easier than ABAC. Instead of associating a user or group with a set of permissions, we give them a role. Hence this role has a set of permissions and then we associate the users or group with the role.


  Webhook: useful to outsource all authorization mechanisms



Authorization Modes:

  - AlwaysAllow	- allows all requests
  - AlwaysDeny - denies all requests


  set as parameter in kube-apiserver yaml file (default is AlwaysAllow)



-----------------------------------------------------//-----------------------------------------------------------

RBAC 

To create a RBAC we create a Role type resource yaml file with

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
rules:

- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list', "get", "create", "update", "delete"]

#Role developer they can only make those actions to pods. To enable more resouces
#just create por - entries


Then we need to link the user to the role. For that we create the RoleBinding type of object.

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: devuser-developer-binding
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer
  apiGorup: rbac.authorization.k8s.io

View roles: kubectl get roles
            kubectl get rolebindings

More details: kubectl describe role <role>
              kubectl describe rolebinding <rolebinding>


Check Access: kubectl auth can-i create deployments
              kubectl auth can-i create deployments --as another-user

You can add a resourceNames parameter under rules: to further restrict the access to specific
resource names



 


